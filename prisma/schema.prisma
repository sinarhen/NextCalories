// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Meal model (optional)
// model Dish {
//   id           String       @id @default(cuid())
//   name         String?      @unique
//   description  String?
//   thumbnailUrl String?
//   createdAt    DateTime     @default(now())
//   updatedAt    DateTime     @updatedAt
//   ingredients  Ingredient[]
//   Category     Category?    @relation(fields: [categoryId], references: [id])
//   categoryId   String?
//   user         User?        @relation(fields: [username], references: [id])
//   userId       String?
// }
//
// model Ingredient {
//   id            String   @id @default(cuid())
//   name          String   @unique
//   description   String
//   thumbnailUrl String?
//   calories      Int
//   fats          Int
//   carbohydrates Int
//   protein       Int
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   dish          Dish?    @relation(fields: [dishId], references: [id])
//   dishId        String?
// }
//
// model Category {
//   id           String   @id @default(cuid())
//   name         String   @unique
//   thumbnailUrl String?
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   recipes       Dish[]
// }

model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensure uniqueness of (provider, providerAccountId) pairs
}

// Define the Session model
model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  favoriteRecipes     String[]
  favoriteProducts  String[]
}
